name: Build and Scan Image
description: Build and scan Dockerfile and container image by hadolint, dockle, trivy, docker scan
branding:
  icon: box
  color: blue
inputs:
  tag:
    description: Image name and optionally tag in "name:tag" format
    required: true
  path:
    description: Path to base directory to run `docker build` command (default ".")
    required: false
    default: "."
  dockerfile:
    description: Path to Dockerfile, which is relative path from "path" parameter (default "Dockerfile")
    required: false
    default: Dockerfile
  hadolint-enable:
    description: Enable scanning Dockerfile by hadolint (default "true")
    required: false
    default: "true"
  hadolint-version:
    description: Hadolint version.
    required: false
    default: "2.12.0" # renovate:hadolint/hadolint
  hadolint-severity:
    description: Fail step if rules with a severity above this level are violated. Acceptable value is one of (error|warning|info|style|ignore|none). (default "info")
    required: false
    default: info
  dockle-enable:
    description: Enable scanning image by dockle (default "true")
    required: false
    default: "true"
  dockle-version:
    description: Dockle version.
    required: false
    default: "0.4.14" # renovate:goodwithtech/dockle
  dockle-severity:
    description: Fail step if checkpoints with a severity above this level are violated. Acceptable value is one of (INFO|WARN|FATAL). (default "WARN")
    required: false
    default: WARN
  trivy-enable:
    description: Enable scanning image by trivy (default "true")
    required: false
    default: "true"
  trivy-version:
    description: Trivy version.
    required: false
    default: "0.49.1" # renovate:aquasecurity/trivy
  trivy-severity:
    description: Fail step if image has vulnerabilities with a severity same as this level. Acceptable value is comma-separated list of (UNKNOWN|LOW|MEDIUM|HIGH|CRITICAL). (default "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL")
    required: false
    default: UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL
  trivy-vuln-type:
    description: Vulnerability types which trivy detect to. Acceptable value is comma-separated list of (os|library). (default "os,library")
    required: false
    default: os,library
  trivy-ignore-unfixed:
    description: Ignore unfixed vulnerabilities (default "false")
    required: false
    default: "false"
  snyk-enable:
    description: Enable scanning image by snyk. If enabled, "snyk-token" must be also set. (default "false")
    required: false
    default: "false"
  snyk-version:
    description: Snyk CLI version.
    required: false
    default: "1.1280.0" # renovate:snyk/snyk
  snyk-token:
    description: Snyk API Token. This is necessary if "snyk-enable" is "true". (default "")
    required: false
    default: ""
  snyk-severity:
    description: Fail step if image has vulnerabilities with a severity above this level. Acceptable value is one of (low|medium|high|critical). (default "low")
    required: false
    default: low
  snyk-exclude-base-image-vulns:
    description: Exclude base image vulnerabilities (default "false")
    required: false
    default: "false"
runs:
  using: composite
  steps:
  - name: Scan Dockerfile by hadolint
    run: |
      echo "::group::Scan Dockerfile by hadolint"

      # Install hadolint
      curl -sL "${HADOLINT_RELEASE_ASSET_URL}" -o /tmp/hadolint
      chmod +x /tmp/hadolint
      sudo mv /tmp/hadolint /usr/local/bin/

      # Scan Dockerfile by hadolint
      hadolint --failure-threshold "${HADOLINT_FAILURE_THRESHOLD}" "${DOCKERFILE}"

      echo "::endgroup::"
    env:
      HADOLINT_RELEASE_ASSET_URL: "https://github.com/hadolint/hadolint/releases/download/v${{ inputs.hadolint-version }}/hadolint-Linux-x86_64"
      HADOLINT_FAILURE_THRESHOLD: "${{ inputs.hadolint-severity}}"
      DOCKERFILE: "${{ inputs.path }}/${{ inputs.dockerfile }}"
    if: ${{ inputs.hadolint-enable == 'true' }}
    shell: bash
  - name: Set up Docker Buildx
    uses: docker/setup-buildx-action@v2
  - name: Build image
    uses: docker/build-push-action@v4
    with:
      context: ${{ inputs.path }}
      file: ${{ inputs.path }}/${{ inputs.dockerfile }}
      tags: ${{ inputs.tag }}
      cache-from: type=gha
      cache-to: type=gha,mode=max
      load: true
  - name: Scan image by dockle
    run: |
      echo "::group::Scan image by dockle"

      # Install dockle
      curl -sL "${DOCKLE_RELEASE_ASSET_URL}" -o /tmp/dockle.tar.gz
      tar zxf /tmp/dockle.tar.gz -C /tmp
      sudo mv /tmp/dockle /usr/local/bin/

      # Scan image by dockle
      dockle --exit-code 1 --exit-level "${DOCKLE_EXIT_LEVEL}" "${IMAGE}"

      echo "::endgroup::"
    env:
      DOCKLE_RELEASE_ASSET_URL: "https://github.com/goodwithtech/dockle/releases/download/v${{ inputs.dockle-version }}/dockle_${{ inputs.dockle-version }}_Linux-64bit.tar.gz"
      DOCKLE_EXIT_LEVEL: "${{ inputs.dockle-severity }}"
      IMAGE: "${{ inputs.tag }}"
    if: ${{ inputs.dockle-enable == 'true' }}
    shell: bash
  - name: Scan image by trivy
    run: |
      echo "::group::Scan image by trivy"

      # Install trivy
      curl -sL "${TRIVY_RELEASE_ASSET_URL}" -o /tmp/trivy.tar.gz
      tar zxf /tmp/trivy.tar.gz -C /tmp
      sudo mv /tmp/trivy /usr/local/bin/

      # Scan image by dockle
      trivy image "${IMAGE}"

      echo "::endgroup::"
    env:
      TRIVY_RELEASE_ASSET_URL: "https://github.com/aquasecurity/trivy/releases/download/v${{ inputs.trivy-version }}/trivy_${{ inputs.trivy-version }}_Linux-64bit.tar.gz"
      TRIVY_EXIT_CODE: "1"
      TRIVY_IGNORE_UNFIXED: "${{ inputs.trivy-ignore-unfixed }}"
      TRIVY_NO_PROGRESS: "true"
      TRIVY_SEVERITY: "${{ inputs.trivy-severity }}"
      TRIVY_VULN_TYPE: "${{ inputs.trivy-vuln-type }}"
      IMAGE: "${{ inputs.tag }}"
    if: ${{ inputs.trivy-enable == 'true' }}
    shell: bash
  - name: Scan image by snyk
    run: |
      echo "::group::Scan image by snyk"

      # Install snyk
      curl -sL "${SNYK_RELEASE_ASSET_URL}" -o /tmp/snyk
      chmod +x /tmp/snyk
      sudo mv /tmp/snyk /usr/local/bin/

      # Make sure snyk token is passed
      if [ -z "${SNYK_TOKEN}" ]; then
        echo "'snyk-token' is necessary if 'snyk-enable' is 'true'"
        exit 1
      fi

      # Authenticate
      snyk auth "${SNYK_TOKEN}"

      # Scan image by snyk
      if [ "${SNYK_EXCLUDE_BASE_IMAGE_VULNS}" == "true" ]; then
        snyk container test --file="${DOCKERFILE}" --severity-threshold="${SNYK_SEVERITY_THRESHOLD}" --exclude-base-image-vulns "${IMAGE}"
      else
        snyk container test --file="${DOCKERFILE}" --severity-threshold="${SNYK_SEVERITY_THRESHOLD}" "${IMAGE}"
      fi

      echo "::endgroup::"
    env:
      SNYK_RELEASE_ASSET_URL: "https://github.com/snyk/snyk/releases/download/v${{ inputs.snyk-version }}/snyk-linux"
      SNYK_EXCLUDE_BASE_IMAGE_VULNS: "${{ inputs.snyk-exclude-base-image-vulns }}"
      SNYK_SEVERITY_THRESHOLD: "${{ inputs.snyk-severity }}"
      SNYK_TOKEN: "${{ inputs.snyk-token }}"
      DOCKERFILE: "${{ inputs.path }}/${{ inputs.dockerfile }}"
      IMAGE: "${{ inputs.tag }}"
    if: ${{ inputs.snyk-enable == 'true' }}
    shell: bash
